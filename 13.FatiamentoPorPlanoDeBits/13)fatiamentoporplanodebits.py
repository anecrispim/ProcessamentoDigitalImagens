# -*- coding: utf-8 -*-
"""13)FatiamentoPorPlanoDeBits.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oXTPQZXXaGH9aN00zhE1bi5g1DCq9xnJ
"""

import numpy as np
from PIL import Image

def fatiar_planos_bits(imagem_array):
    planos = []
    for i in range(8):
        plano = (imagem_array >> i) & 1
        planos.append(plano)
    return planos

def salvar_imagens_binarias(planos, nome_base):
    for i, plano in enumerate(planos, 1):
        imagem_binaria = (plano * 255).astype(np.uint8)
        Image.fromarray(imagem_binaria).save(f"{nome_base}_plano_{i}_binario.png")

def salvar_imagens_ponderadas(planos, nome_base):
    for i, plano in enumerate(planos, 1):
        peso = 2 ** (i - 1)
        imagem_ponderada = (plano * peso).astype(np.uint8)
        Image.fromarray(imagem_ponderada).save(f"{nome_base}_plano_{i}_ponderado.png")

def reconstruir_3_bits_most_significativos(planos):
    imagem_reconstruida = (planos[5] * 32 + planos[6] * 64 + planos[7] * 128).astype(np.uint8)
    return imagem_reconstruida

def processar_imagem(caminho_imagem):
    imagem = Image.open(caminho_imagem).convert("L")
    imagem_array = np.array(imagem)

    planos = fatiar_planos_bits(imagem_array)

    salvar_imagens_binarias(planos, "saida")

    salvar_imagens_ponderadas(planos, "saida")

    imagem_reconstruida = reconstruir_3_bits_most_significativos(planos)
    Image.fromarray(imagem_reconstruida).save("saida_reconstruida_3_bits.png")

processar_imagem("Fig0314(a)(100-dollars).tif")