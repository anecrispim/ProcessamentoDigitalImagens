# -*- coding: utf-8 -*-
"""05-2)ManipulaçãoPBM/PGM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xCyK9RB_YlQk4JeFVAD2ztnINk2ffBdX

Sobre o arquivo de Imagem “Entrada.pgm” (8 bits em escala de cinza, 0-255), gerar arquivo de saída binário, tipo PBM –P1(ASCII), ou seja com duas tonalidades (preto ou branco);
a) Ajustar valor do limiar em 128, se valorpixel <= limiar := 0 e valor > limiar := 1;
b) Definir limiar (fator de ajuste, lembrando que , se valorpixel <= limiar := 0 e valor > limiar := 1;
c) Aplicar negativo (sobre a Imagem gerada no ítem “a”. Manter formato P2;
"""

import numpy as np
from PIL import Image

# Carregar a imagem
imagem = Image.open("Entrada_EscalaCinza.pgm").convert("L")
imagem_array = np.array(imagem)

# Função para gerar a imagem binária no formato PBM (P1)
def gerar_pbm(imagem_array, limiar=128):
    # Converter para preto e branco usando o limiar
    imagem_binaria = (imagem_array > limiar).astype(int)

    # Salvar o arquivo em formato PBM (P1, ASCII)
    with open("Saida_binaria.pbm", "w") as f:
        f.write("P1\n")  # Formato P1 (ASCII)
        f.write(f"{imagem_binaria.shape[1]} {imagem_binaria.shape[0]}\n")  # Largura e altura
        for linha in imagem_binaria:
            f.write(" ".join(map(str, linha)) + "\n")  # Converte cada linha para texto e escreve no arquivo

# Função para aplicar o negativo da imagem
def aplicar_negativo(imagem_binaria):
    # Inverter os valores binários
    imagem_negativo = 1 - imagem_binaria

    # Salvar o negativo em formato PGM (P2)
    with open("Saida_negativo.pgm", "w") as f:
        f.write("P2\n")  # Formato P2 (grayscale)
        f.write(f"{imagem_binaria.shape[1]} {imagem_binaria.shape[0]}\n")  # Largura e altura
        f.write("1\n")  # Valor máximo para imagem binária é 1
        for linha in imagem_negativo:
            f.write(" ".join(map(str, linha)) + "\n")  # Escreve cada linha no arquivo

# Chamada das funções
gerar_pbm(imagem_array)  # Gera a imagem binária com limiar 128
imagem_binaria = (imagem_array > 128).astype(int)  # Obtém imagem binária para o negativo
aplicar_negativo(imagem_binaria)  # Gera o negativo da imagem