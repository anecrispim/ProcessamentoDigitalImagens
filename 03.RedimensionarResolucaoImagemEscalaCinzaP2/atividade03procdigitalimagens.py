# -*- coding: utf-8 -*-
"""Atividade03ProcDigitalImagens.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O3-DiLHH65OlWZ2dvgT33gtaPwtObL1t

Redimensionar Resolução Imagem Escala de Cinza (tipo P2):

a) Tamanho 10x menor

b) Padrão 480x320

c) Padrão 720p (HD)

d) Padrão 1080p Full HD

e) Padrão 4k e 8k (interpolada)
"""

# Função para carregar uma imagem PGM (P2)
def carregar_pgm_imagem(file_path):
    with open(file_path, 'r') as f:
        linhas = f.readlines()

    # Ignorar comentários e cabeçalhos
    data = [line for line in linhas if not line.startswith('#')]

    # Verificar o tipo de arquivo
    assert data[0].strip() == 'P2', "O arquivo não é do tipo P2 (PGM)."

    # Obter as dimensões da imagem
    width, height = map(int, data[1].split())

    # Valor máximo da escala de cinza (não utilizamos diretamente)
    max_val = int(data[2])

    # Carregar os pixels da imagem
    pixels = list(map(int, ' '.join(data[3:]).split()))

    # Retornar as dimensões e os pixels
    return width, height, pixels

# Função para salvar uma imagem PGM (P2)
def salvar_pgm_imagem(width, height, pixels, max_val, file_path):
    with open(file_path, 'w') as f:
        f.write(f'P2\n{width} {height}\n{max_val}\n')
        for i in range(height):
            row = pixels[i*width:(i+1)*width]
            f.write(' '.join(map(str, row)) + '\n')

# Função para redimensionar a imagem por fator de escala (inteiro)
def redimensionar_imagem(width, height, pixels, novo_width, novo_height):
    novo_pixels = [0] * (novo_width * novo_height)
    x_ratio = width / novo_width
    y_ratio = height / novo_height

    for novo_y in range(novo_height):
        for novo_x in range(novo_width):
            # Calcula a posição original dos pixels
            old_x = int(novo_x * x_ratio)
            old_y = int(novo_y * y_ratio)

            # Copia o pixel correspondente da imagem original
            novo_pixels[novo_y * novo_width + novo_x] = pixels[old_y * width + old_x]

    return novo_width, novo_height, novo_pixels

# Função para interpolação simples (expandir a imagem para um tamanho maior)
def interpola_imagem(width, height, pixels, novo_width, novo_height):
    novo_pixels = [0] * (novo_width * novo_height)
    x_ratio = width / novo_width
    y_ratio = height / novo_height

    for new_y in range(novo_height):
        for new_x in range(novo_width):
            # Calcula a posição original aproximada dos pixels
            old_x = int(new_x * x_ratio)
            old_y = int(new_y * y_ratio)

            # Copia o pixel correspondente da imagem original
            novo_pixels[new_y * novo_width + new_x] = pixels[old_y * width + old_x]

    return novo_width, novo_height, novo_pixels

# Carregar a imagem original
width, height, pixels = carregar_pgm_imagem('Entrada_EscalaCinza.pgm')

# a) Reduzir para 10x menor
novo_width = width // 10
novo_height = height // 10
menor_width, menor_height, menor_pixels = redimensionar_imagem(width, height, pixels, novo_width, novo_height)
salvar_pgm_imagem(menor_width, menor_height, menor_pixels, max(pixels), 'imagemA.pgm')

# b) Redimensionar para 480x320
novo_width, novo_height = 480, 320
vga_width, vga_height, vga_pixels = redimensionar_imagem(width, height, pixels, novo_width, novo_height)
salvar_pgm_imagem(vga_width, vga_height, vga_pixels, max(pixels), 'imagemB.pgm')

# c) Redimensionar para 720p (1280x720)
novo_width, novo_height = 1280, 720
hd_width, hd_height, hd_pixels = redimensionar_imagem(width, height, pixels, novo_width, novo_height)
salvar_pgm_imagem(hd_width, hd_height, hd_pixels, max(pixels), 'imagemC.pgm')

# d) Redimensionar para 1080p (1920x1080)
novo_width, novo_height = 1920, 1080
full_hd_width, full_hd_height, full_hd_pixels = redimensionar_imagem(width, height, pixels, novo_width, novo_height)
salvar_pgm_imagem(full_hd_width, full_hd_height, full_hd_pixels, max(pixels), 'imagemD.pgm')

# e) Redimensionar para 4K (3840x2160) e 8K (7680x4320)
novo_width, novo_height = 3840, 2160
four_k_width, four_k_height, four_k_pixels = interpola_imagem(width, height, pixels, novo_width, novo_height)
salvar_pgm_imagem(four_k_width, four_k_height, four_k_pixels, max(pixels), 'imagemE_4k.pgm')

novo_width, novo_height = 7680, 4320
eight_k_width, eight_k_height, eight_k_pixels = interpola_imagem(width, height, pixels, novo_width, novo_height)
salvar_pgm_imagem(eight_k_width, eight_k_height, eight_k_pixels, max(pixels), 'imagemE_8k.pgm')

print("Imagens geradas com sucesso.")