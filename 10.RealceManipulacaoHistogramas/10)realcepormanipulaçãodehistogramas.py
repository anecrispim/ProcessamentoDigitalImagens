# -*- coding: utf-8 -*-
"""10)RealcePorManipulaçãoDeHistogramas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1myywXZdRr8KwP1GZpLv_4JpovzfonGr6

a) Utilizar a funcão de transferência no material sobre histograma para gerar as imagens e gráfico sobre a imagem (PGM)
    
    Gerar o histograma da imagem gerada

b) Utilizar a funcão de transferência no material sobre histograma para gerar as imagens e gráfico sobre a imagem(PPM - RGB)
    
    Gerar o histograma da imagem gerada
"""

import numpy as np
import pandas as pd
from PIL import Image
import matplotlib.pyplot as plt

def aplicar_funcao_transferencia(imagem_array):
    histograma, _ = np.histogram(imagem_array, bins=256, range=(0, 255))
    cdf = np.cumsum(histograma) / np.sum(histograma)
    imagem_transformada = (cdf[imagem_array] * 255).astype(np.uint8)
    return imagem_transformada

def gerar_histograma(imagem_array):
    histograma, _ = np.histogram(imagem_array, bins=256, range=(0, 255))
    return histograma

def salvar_grafico(histograma, titulo, cor, nome_arquivo):
    plt.figure(figsize=(10, 6))
    plt.bar(range(256), histograma, color=cor, alpha=0.7)
    plt.title(titulo)
    plt.xlabel("Intensidade")
    plt.ylabel("Frequência")
    plt.savefig(nome_arquivo)
    plt.close()

def processar_imagem_pgm(caminho_imagem):
    imagem = Image.open(caminho_imagem).convert("L")
    imagem_array = np.array(imagem)

    imagem_transformada = aplicar_funcao_transferencia(imagem_array)
    histograma_transformado = gerar_histograma(imagem_transformada)

    Image.fromarray(imagem_transformada).save("imagem_transferida_cinza.pgm")
    salvar_grafico(histograma_transformado, "Histograma - Imagem Transferida (Cinza)", "gray", "histograma_transferido_cinza.png")

def processar_imagem_ppm(caminho_imagem):
    imagem = Image.open(caminho_imagem)
    imagem_array = np.array(imagem)

    r_transformado = aplicar_funcao_transferencia(imagem_array[:, :, 0])
    g_transformado = aplicar_funcao_transferencia(imagem_array[:, :, 1])
    b_transformado = aplicar_funcao_transferencia(imagem_array[:, :, 2])

    imagem_transformada = np.stack((r_transformado, g_transformado, b_transformado), axis=-1)

    hist_r = gerar_histograma(r_transformado)
    hist_g = gerar_histograma(g_transformado)
    hist_b = gerar_histograma(b_transformado)

    Image.fromarray(imagem_transformada).save("imagem_transferida_rgb.ppm")
    salvar_grafico(hist_r, "Histograma - Imagem Transferida (R)", "red", "histograma_transferido_r.png")
    salvar_grafico(hist_g, "Histograma - Imagem Transferida (G)", "green", "histograma_transferido_g.png")
    salvar_grafico(hist_b, "Histograma - Imagem Transferida (B)", "blue", "histograma_transferido_b.png")

processar_imagem_pgm("EntradaEscalaCinza.pgm")
processar_imagem_ppm("EntradaRGB.ppm")