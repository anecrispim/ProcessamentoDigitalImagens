# -*- coding: utf-8 -*-
"""AtividadesProcDigitalImagens.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VNVhnmbx4NnS7DPzYAZaGy3aX2zYr5GX

Implementar imagem com valores aleatórios de tamanho 100x100
PBM - Tipo P1
PGM - Tipo P2 com 16 níveis intensidade cinza (4bits)
"""

import numpy as np

# Dimensões da imagem
width, height = 100, 100

# Função para gerar PBM (P1)
def generate_pbm(width, height):
    pbm_data = np.random.randint(2, size=(height, width))  # 0 ou 1
    pbm_header = f'P1\n{width} {height}\n'

    # Convertendo os dados para string
    pbm_body = '\n'.join(' '.join(map(str, row)) for row in pbm_data)

    return pbm_header + pbm_body

# Função para gerar PGM (P2)
def generate_pgm(width, height):
    pgm_data = np.random.randint(16, size=(height, width))  # Valores entre 0 e 15
    pgm_header = f'P2\n{width} {height}\n15\n'  # 15 é o máximo nível de cinza (4 bits)

    # Convertendo os dados para string
    pgm_body = '\n'.join(' '.join(map(str, row)) for row in pgm_data)

    return pgm_header + pgm_body

# Gerar imagens
pbm_image = generate_pbm(width, height)
pgm_image = generate_pgm(width, height)

# Salvar PBM
with open('random_image.pbm', 'w') as pbm_file:
    pbm_file.write(pbm_image)

# Salvar PGM
with open('random_image.pgm', 'w') as pgm_file:
    pgm_file.write(pgm_image)

print("Imagens PBM e PGM geradas com sucesso.")