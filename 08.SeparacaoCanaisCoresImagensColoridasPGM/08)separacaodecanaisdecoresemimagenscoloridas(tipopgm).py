# -*- coding: utf-8 -*-
"""08)SeparaçãoDeCanaisDeCoresEmImagensColoridas(tipoPGM).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17LrmZ_Ka8QHJGec8Gr-lM7L4ZPdMPH45

a) Efetuar separação de cores entre os valores RGB (mínimo) na imagem Original (P3).

•Imagem 1) ->Para R – Manter seus valores e zerar(0) G e B

•Imagem 2) ->Para G – Manter seus valores e zerar(0) R e B

•Imagem 3) ->Para B – Manter seus valores e zerar(0) R e G

b) Efetuar separação de cores entre os valores RGB (máximo) na imagem Original (P3).

•Imagem 4) ->Para R – Manter seus valores e alterar para máximo(255) G e B

•Imagem 5) ->Para G – Manter seus valores e alterar para máximo(255)R e B

•Imagem 6) ->Para B – Manter seus valores e alterar para máximo(255)R e G
"""

import numpy as np
from PIL import Image

imagem = Image.open("Fig4.ppm")
imagem_array = np.array(imagem)

# Função responsável por gerar imagem com separação mínima de cor (0 nos canais não selecionados)
def separar_minimo(imagem_array, canal):
    imagem_separada = imagem_array.copy()
    if canal == 'R':
        imagem_separada[:, :, 1] = 0  # G = 0
        imagem_separada[:, :, 2] = 0  # B = 0
    elif canal == 'G':
        imagem_separada[:, :, 0] = 0  # R = 0
        imagem_separada[:, :, 2] = 0  # B = 0
    elif canal == 'B':
        imagem_separada[:, :, 0] = 0  # R = 0
        imagem_separada[:, :, 1] = 0  # G = 0
    return imagem_separada

# Função responsável por gerar imagem com separação máxima de cor (255 nos canais não selecionados)
def separar_maximo(imagem_array, canal):
    imagem_separada = imagem_array.copy()
    if canal == 'R':
        imagem_separada[:, :, 1] = 255  # G = 255
        imagem_separada[:, :, 2] = 255  # B = 255
    elif canal == 'G':
        imagem_separada[:, :, 0] = 255  # R = 255
        imagem_separada[:, :, 2] = 255  # B = 255
    elif canal == 'B':
        imagem_separada[:, :, 0] = 255  # R = 255
        imagem_separada[:, :, 1] = 255  # G = 255
    return imagem_separada

# Função responsável por salvar cada imagem resultante
def salvar_imagem(imagem_array, nome_arquivo):
    imagem = Image.fromarray(imagem_array)
    imagem.save(nome_arquivo)

# Gerar e salvar imagens com valores mínimos nos canais não selecionados
salvar_imagem(separar_minimo(imagem_array, 'R'), "Saida_R_minimo.ppm")
salvar_imagem(separar_minimo(imagem_array, 'G'), "Saida_G_minimo.ppm")
salvar_imagem(separar_minimo(imagem_array, 'B'), "Saida_B_minimo.ppm")

# Gerar e salvar imagens com valores máximos nos canais não selecionados
salvar_imagem(separar_maximo(imagem_array, 'R'), "Saida_R_maximo.ppm")
salvar_imagem(separar_maximo(imagem_array, 'G'), "Saida_G_maximo.ppm")
salvar_imagem(separar_maximo(imagem_array, 'B'), "Saida_B_maximo.ppm")